import { ChartNode, NodeConnection, NodeInputDefinition, NodeOutputDefinition } from '../NodeBase.js';
import { NodeImpl, NodeUIData } from '../NodeImpl.js';
import { Inputs, Outputs } from '../GraphProcessor.js';
import { EditorDefinition } from '../../index.js';
export type DelayNode = ChartNode<'delay', DelayNodeData>;
export type DelayNodeData = {
    delay: number;
    useDelayInput?: boolean;
};
export declare class DelayNodeImpl extends NodeImpl<DelayNode> {
    #private;
    static create(): DelayNode;
    getInputDefinitions(connections: NodeConnection[]): NodeInputDefinition[];
    getOutputDefinitions(connections: NodeConnection[]): NodeOutputDefinition[];
    static getUIData(): NodeUIData;
    getEditors(): EditorDefinition<DelayNode>[];
    getBody(): string | undefined;
    process(inputData: Inputs): Promise<Outputs>;
}
export declare const delayNode: import("../NodeImpl.js").NodeDefinition<DelayNode>;
