import { ChartNode, NodeInputDefinition, PortId, NodeOutputDefinition } from '../NodeBase.js';
import { NodeImpl, NodeUIData } from '../NodeImpl.js';
import { DataValue } from '../DataValue.js';
import { EditorDefinition, NodeBodySpec } from '../../index.js';
export type ExtractYamlNode = ChartNode<'extractYaml', ExtractYamlNodeData>;
export type ExtractYamlNodeData = {
    rootPropertyName: string;
    useRootPropertyNameInput?: boolean;
    objectPath?: string;
    useObjectPathInput?: boolean;
};
export declare class ExtractYamlNodeImpl extends NodeImpl<ExtractYamlNode> {
    static create(): ExtractYamlNode;
    getInputDefinitions(): NodeInputDefinition[];
    getOutputDefinitions(): NodeOutputDefinition[];
    getEditors(): EditorDefinition<ExtractYamlNode>[];
    getBody(): string | NodeBodySpec | undefined;
    static getUIData(): NodeUIData;
    process(inputs: Record<PortId, DataValue>): Promise<Record<PortId, DataValue>>;
}
export declare const extractYamlNode: import("../NodeImpl.js").NodeDefinition<ExtractYamlNode>;
