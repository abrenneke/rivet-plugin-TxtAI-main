import { ChartNode, NodeInputDefinition, NodeOutputDefinition } from '../NodeBase.js';
import { NodeImpl, NodeUIData } from '../NodeImpl.js';
import { DataValue } from '../DataValue.js';
import { EditorDefinition } from '../EditorDefinition.js';
import { NodeBodySpec } from '../NodeBodySpec.js';
export type CodeNode = ChartNode<'code', CodeNodeData>;
export type CodeNodeData = {
    code: string;
    inputNames: string;
    outputNames: string;
};
export declare class CodeNodeImpl extends NodeImpl<CodeNode> {
    static create(): CodeNode;
    getInputDefinitions(): NodeInputDefinition[];
    getOutputDefinitions(): NodeOutputDefinition[];
    getEditors(): EditorDefinition<CodeNode>[];
    getBody(): string | NodeBodySpec | undefined;
    static getUIData(): NodeUIData;
    process(inputs: Record<string, DataValue>): Promise<Record<string, DataValue>>;
}
export declare const codeNode: import("../NodeImpl.js").NodeDefinition<CodeNode>;
