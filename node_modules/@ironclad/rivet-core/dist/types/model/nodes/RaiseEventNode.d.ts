import { ChartNode, NodeInputDefinition, NodeOutputDefinition } from '../NodeBase.js';
import { NodeImpl, NodeUIData } from '../NodeImpl.js';
import { DataValue } from '../DataValue.js';
import { Inputs } from '../GraphProcessor.js';
import { InternalProcessContext } from '../ProcessContext.js';
import { EditorDefinition } from '../EditorDefinition.js';
import { NodeBodySpec } from '../NodeBodySpec.js';
export type RaiseEventNode = ChartNode<'raiseEvent', RaiseEventNodeData>;
export type RaiseEventNodeData = {
    eventName: string;
    useEventNameInput: boolean;
};
export declare class RaiseEventNodeImpl extends NodeImpl<RaiseEventNode> {
    static create(): RaiseEventNode;
    getInputDefinitions(): NodeInputDefinition[];
    getOutputDefinitions(): NodeOutputDefinition[];
    getEditors(): EditorDefinition<RaiseEventNode>[];
    getBody(): string | NodeBodySpec | undefined;
    static getUIData(): NodeUIData;
    process(inputs: Inputs, context: InternalProcessContext): Promise<Record<string, DataValue>>;
}
export declare const raiseEventNode: import("../NodeImpl.js").NodeDefinition<RaiseEventNode>;
