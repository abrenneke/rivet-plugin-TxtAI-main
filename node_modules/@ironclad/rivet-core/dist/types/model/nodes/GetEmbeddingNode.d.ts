import { ChartNode, NodeInputDefinition, NodeOutputDefinition } from '../NodeBase.js';
import { NodeImpl, NodeUIData } from '../NodeImpl.js';
import { Inputs, Outputs } from '../GraphProcessor.js';
import { InternalProcessContext } from '../ProcessContext.js';
import { EditorDefinition } from '../../index.js';
export type GetEmbeddingNode = ChartNode<'getEmbedding', GetEmbeddingNodeData>;
export type GetEmbeddingNodeData = {
    integration: string;
    useIntegrationInput?: boolean;
};
export declare class GetEmbeddingNodeImpl extends NodeImpl<GetEmbeddingNode> {
    static create(): GetEmbeddingNode;
    getInputDefinitions(): NodeInputDefinition[];
    getOutputDefinitions(): NodeOutputDefinition[];
    getEditors(): EditorDefinition<GetEmbeddingNode>[];
    getBody(): string | undefined;
    static getUIData(): NodeUIData;
    process(inputs: Inputs, context: InternalProcessContext): Promise<Outputs>;
}
export declare const getEmbeddingNode: import("../NodeImpl.js").NodeDefinition<GetEmbeddingNode>;
