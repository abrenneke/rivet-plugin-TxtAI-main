import { ChartNode, NodeInputDefinition, NodeOutputDefinition } from '../NodeBase.js';
import { NodeImpl, NodeUIData } from '../NodeImpl.js';
import { Inputs, Outputs } from '../GraphProcessor.js';
import { EditorDefinition } from '../../index.js';
export type NumberNode = ChartNode<'number', NumberNodeData>;
export type NumberNodeData = {
    value?: number;
    useValueInput?: boolean;
    round?: boolean;
    roundTo?: number;
};
export declare class NumberNodeImpl extends NodeImpl<NumberNode> {
    static create(): NumberNode;
    getInputDefinitions(): NodeInputDefinition[];
    getOutputDefinitions(): NodeOutputDefinition[];
    getEditors(): EditorDefinition<NumberNode>[];
    getBody(): string | undefined;
    static getUIData(): NodeUIData;
    process(inputs: Inputs): Promise<Outputs>;
}
export declare const numberNode: import("../NodeImpl.js").NodeDefinition<NumberNode>;
