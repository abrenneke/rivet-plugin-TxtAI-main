import { ChartNode, NodeInputDefinition, NodeOutputDefinition } from '../NodeBase.js';
import { NodeImpl, NodeUIData } from '../NodeImpl.js';
import { Inputs, Outputs } from '../GraphProcessor.js';
import { InternalProcessContext } from '../ProcessContext.js';
import { EditorDefinition } from '../../index.js';
export type VectorNearestNeighborsNode = ChartNode<'vectorNearestNeighbors', VectorNearestNeighborsNodeData>;
export type VectorNearestNeighborsNodeData = {
    integration: string;
    useIntegrationInput?: boolean;
    k: number;
    useKInput?: boolean;
    collectionId: string;
    useCollectionIdInput?: boolean;
};
export declare class VectorNearestNeighborsNodeImpl extends NodeImpl<VectorNearestNeighborsNode> {
    static create(): VectorNearestNeighborsNode;
    getInputDefinitions(): NodeInputDefinition[];
    getOutputDefinitions(): NodeOutputDefinition[];
    getEditors(): EditorDefinition<VectorNearestNeighborsNode>[];
    getBody(): string | undefined;
    static getUIData(): NodeUIData;
    process(inputs: Inputs, context: InternalProcessContext): Promise<Outputs>;
}
export declare const vectorNearestNeighborsNode: import("../NodeImpl.js").NodeDefinition<VectorNearestNeighborsNode>;
