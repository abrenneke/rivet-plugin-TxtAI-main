import { NodeImpl, nodeDefinition } from '../NodeImpl.js';
import { nanoid } from 'nanoid/non-secure';
import { base64ToUint8Array, expectType, } from '../../index.js';
export class ImageNodeImpl extends NodeImpl {
    static create() {
        return {
            id: nanoid(),
            type: 'image',
            title: 'Image',
            visualData: { x: 0, y: 0, width: 250 },
            data: {
                useDataInput: false,
                mediaType: 'image/png',
                useMediaTypeInput: false,
            },
        };
    }
    getInputDefinitions() {
        const inputDefinitions = [];
        if (this.chartNode.data.useDataInput) {
            inputDefinitions.push({
                id: 'data',
                title: 'Data',
                dataType: 'string',
            });
        }
        if (this.chartNode.data.useMediaTypeInput) {
            inputDefinitions.push({
                id: 'mediaType',
                title: 'Media Type',
                dataType: 'string',
            });
        }
        return inputDefinitions;
    }
    getOutputDefinitions() {
        return [
            {
                id: 'image',
                title: 'Image',
                dataType: 'image',
            },
        ];
    }
    getEditors() {
        return [
            {
                type: 'dropdown',
                label: 'Media Type',
                dataKey: 'mediaType',
                options: [
                    { value: 'image/png', label: 'PNG' },
                    { value: 'image/jpeg', label: 'JPEG' },
                    { value: 'image/gif', label: 'GIF' },
                ],
                useInputToggleDataKey: 'useMediaTypeInput',
            },
            {
                type: 'imageBrowser',
                label: 'Image',
                dataKey: 'data',
                useInputToggleDataKey: 'useDataInput',
                mediaTypeDataKey: 'mediaType',
            },
        ];
    }
    static getUIData() {
        return {
            contextMenuTitle: 'Image',
            group: 'Data',
            infoBoxTitle: 'Image Node',
            infoBoxBody: 'Defines a static image for use with other nodes. Can convert a binary type into an image type.',
        };
    }
    async process(inputData, context) {
        let data;
        if (this.chartNode.data.useDataInput) {
            data = expectType(inputData['data'], 'binary');
        }
        else {
            const dataRef = this.data.data?.refId;
            if (!dataRef) {
                throw new Error('No data ref');
            }
            const encodedData = context.project.data?.[dataRef];
            if (!encodedData) {
                throw new Error(`No data at ref ${dataRef}`);
            }
            data = base64ToUint8Array(encodedData);
        }
        const mediaType = this.chartNode.data.useMediaTypeInput
            ? expectType(inputData['mediaType'], 'string')
            : this.chartNode.data.mediaType;
        return {
            ['image']: {
                type: 'image',
                value: { mediaType: mediaType, data },
            },
        };
    }
}
export const imageNode = nodeDefinition(ImageNodeImpl, 'Image');
