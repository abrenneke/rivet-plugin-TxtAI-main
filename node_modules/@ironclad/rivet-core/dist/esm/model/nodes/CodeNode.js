import { nanoid } from 'nanoid/non-secure';
import { NodeImpl, nodeDefinition } from '../NodeImpl.js';
import { dedent } from 'ts-dedent';
export class CodeNodeImpl extends NodeImpl {
    static create() {
        const chartNode = {
            type: 'code',
            title: 'Code',
            id: nanoid(),
            visualData: {
                x: 0,
                y: 0,
            },
            data: {
                code: dedent `// This is a code node, you can write and JS in here and it will be executed.
        // Inputs are accessible via an object \`inputs\` and data is typed (i.e. inputs.foo.type, inputs.foo.value)
        // Return an object with named outputs that match the output names specified in the node's config.
        // Output values must by typed as well (e.g. { bar: { type: 'string', value: 'bar' } }
        return { output: inputs.input };`,
                inputNames: 'input',
                outputNames: 'output',
            },
        };
        return chartNode;
    }
    getInputDefinitions() {
        return this.chartNode.data.inputNames.split(',').map((inputName) => {
            return {
                type: 'string',
                id: inputName.trim(),
                title: inputName.trim(),
                dataType: 'string',
                required: false,
            };
        });
    }
    getOutputDefinitions() {
        return this.chartNode.data.outputNames.split(',').map((outputName) => {
            return {
                id: outputName.trim(),
                title: outputName.trim(),
                dataType: 'string',
            };
        });
    }
    getEditors() {
        return [
            {
                type: 'code',
                label: 'Code',
                dataKey: 'code',
                language: 'javascript',
            },
        ];
    }
    getBody() {
        const trimmed = this.data.code
            .split('\n')
            .slice(0, 15)
            .map((line) => (line.length > 50 ? line.slice(0, 50) + '...' : line))
            .join('\n')
            .trim();
        return {
            type: 'colorized',
            text: trimmed,
            language: 'javascript',
            fontSize: 12,
            fontFamily: 'monospace',
        };
    }
    static getUIData() {
        return {
            infoBoxBody: dedent `
        Executes a piece of JavaScript code. Documentation for the inputs and outputs is available in the default code.
      `,
            infoBoxTitle: 'Code Node',
            contextMenuTitle: 'Code',
            group: ['Advanced'],
        };
    }
    async process(inputs) {
        // eslint-disable-next-line no-new-func
        const codeFunction = new Function('inputs', this.chartNode.data.code);
        const outputs = codeFunction(inputs);
        return outputs;
    }
}
export const codeNode = nodeDefinition(CodeNodeImpl, 'Code');
