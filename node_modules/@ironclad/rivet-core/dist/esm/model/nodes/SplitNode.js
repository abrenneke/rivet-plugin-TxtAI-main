import { NodeImpl, dedent, nodeDefinition, newId, getInputOrData, coerceType, } from '../../index.js';
export class SplitNodeImpl extends NodeImpl {
    static create() {
        return {
            id: newId(),
            type: 'split',
            title: 'Split Text',
            visualData: { x: 0, y: 0, width: 250 },
            data: {
                delimiter: ',',
            },
        };
    }
    getInputDefinitions() {
        const inputs = [
            {
                id: 'string',
                title: 'String',
                dataType: 'string',
            },
        ];
        if (this.data.useDelimiterInput) {
            inputs.push({
                id: 'delimiter',
                title: 'Delimiter',
                dataType: 'string',
            });
        }
        return inputs;
    }
    getOutputDefinitions() {
        return [
            {
                id: 'splitString',
                title: 'Split',
                dataType: 'string[]',
            },
        ];
    }
    static getUIData() {
        return {
            infoBoxBody: dedent `
        Splits a string by the provided delimiter.
      `,
            infoBoxTitle: 'Split Text Node',
            contextMenuTitle: 'Split Text',
            group: ['Text'],
        };
    }
    getEditors() {
        return [
            {
                type: 'code',
                label: 'Delimiter',
                language: 'plaintext',
                dataKey: 'delimiter',
                useInputToggleDataKey: 'useDelimiterInput',
            },
        ];
    }
    getBody() {
        if (this.data.useDelimiterInput) {
            return '(Delimiter from input)';
        }
        if (this.data.delimiter === '\n') {
            return '(New line)';
        }
        if (this.data.delimiter === '\t') {
            return '(Tab)';
        }
        if (this.data.delimiter === ' ') {
            return '(Space)';
        }
        return this.data.delimiter;
    }
    async process(inputs, context) {
        const delimiter = getInputOrData(this.data, inputs, 'delimiter');
        const stringToSplit = coerceType(inputs['string'], 'string');
        const splitString = stringToSplit.split(delimiter);
        return {
            ['splitString']: {
                type: 'string[]',
                value: splitString,
            },
        };
    }
}
export const splitNode = nodeDefinition(SplitNodeImpl, 'Split String');
