import { nanoid } from 'nanoid/non-secure';
import { dedent } from 'ts-dedent';
import { pluginNodeDefinition, } from '../../index.js';
import { getApiKey, getLemurParams, lemurEditorDefinitions, lemurTranscriptIdsInputDefinition } from './lemurHelpers.js';
export const LemurSummaryNodeImpl = {
    create() {
        const chartNode = {
            type: 'assemblyAiLemurSummary',
            title: 'LeMUR Summary',
            id: nanoid(),
            visualData: {
                x: 0,
                y: 0,
                width: 250,
            },
            data: {
                final_model: 'default',
            },
        };
        return chartNode;
    },
    getInputDefinitions() {
        return [
            lemurTranscriptIdsInputDefinition,
            {
                id: 'context',
                dataType: 'string',
                title: 'Context',
            },
        ];
    },
    getOutputDefinitions() {
        return [
            {
                dataType: 'string',
                id: 'response',
                title: 'Response',
            },
        ];
    },
    getEditors() {
        return [
            {
                type: 'string',
                label: 'Context',
                dataKey: 'context',
            },
            ...lemurEditorDefinitions,
        ];
    },
    getBody() {
        return '';
    },
    getUIData() {
        return {
            infoBoxBody: dedent `Use AssemblyAI LeMUR Summary to summarize transcripts`,
            infoBoxTitle: 'Use AssemblyAI LeMUR Summary',
            contextMenuTitle: 'LeMUR Summary',
            group: ['AI', 'AssemblyAI'],
        };
    },
    async process(data, inputs, context) {
        const apiKey = getApiKey(context);
        const params = getLemurParams(inputs, data);
        if (data.answer_format) {
            params.answer_format = data.answer_format;
        }
        const { response } = await runLemurSummary(apiKey, params);
        return {
            ['response']: {
                type: 'string',
                value: response,
            },
        };
    },
};
async function runLemurSummary(apiToken, params) {
    const response = await fetch('https://api.assemblyai.com/lemur/v3/generate/summary', {
        method: 'POST',
        body: JSON.stringify(params),
        headers: {
            authorization: apiToken,
        },
    });
    const body = await response.json();
    if (response.status !== 200) {
        if ('error' in body)
            throw new Error(body.error);
        throw new Error(`LeMUR Summary failed with status ${response.status}`);
    }
    return body;
}
export const lemurSummaryNode = pluginNodeDefinition(LemurSummaryNodeImpl, 'LeMUR Summary');
