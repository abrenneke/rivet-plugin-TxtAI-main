'use strict';

var globalAxios = require('axios');
var common = require('../common.js');
var base = require('../base.js');

/* tslint:disable */
/* eslint-disable */
/**
 * Gentrace API
 * These API routes are designed to ingest events from clients.
 *
 * The version of the OpenAPI document: 0.12.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
/**
 * CoreApi - axios parameter creator
 * @export
 */
const CoreApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Get pipelines, optionally filtered by label
         * @param {string} [label] The label to filter pipelines by
         * @param {string} [slug] The slug to filter pipelines by
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pipelinesGet: (label, slug, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/pipelines`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            yield common.setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (label !== undefined) {
                localVarQueryParameter["label"] = label;
            }
            if (slug !== undefined) {
                localVarQueryParameter["slug"] = slug;
            }
            common.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Create a run
         * @param {RunRequest} runRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        runPost: (runRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'runRequest' is not null or undefined
            common.assertParamExists("runPost", "runRequest", runRequest);
            const localVarPath = `/run`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            yield common.setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter["Content-Type"] = "application/json";
            common.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common.serializeDataIfNeeded(runRequest, localVarRequestOptions, configuration);
            return {
                url: common.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Get test cases for a pipeline
         * @param {string} [pipelineId] The ID of the Pipeline to retrieve test cases for
         * @param {string} [pipelineSlug] The slug of the Pipeline to retrieve test cases for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testCaseGet: (pipelineId, pipelineSlug, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/test-case`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            yield common.setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (pipelineId !== undefined) {
                localVarQueryParameter["pipelineId"] = pipelineId;
            }
            if (pipelineSlug !== undefined) {
                localVarQueryParameter["pipelineSlug"] = pipelineSlug;
            }
            common.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Update an existing test case
         * @param {UpdateTestCase} updateTestCase
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testCasePatch: (updateTestCase, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'updateTestCase' is not null or undefined
            common.assertParamExists("testCasePatch", "updateTestCase", updateTestCase);
            const localVarPath = `/test-case`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "PATCH" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            yield common.setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter["Content-Type"] = "application/json";
            common.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common.serializeDataIfNeeded(updateTestCase, localVarRequestOptions, configuration);
            return {
                url: common.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Create a new test case
         * @param {TestCasePostRequest} testCasePostRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testCasePost: (testCasePostRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'testCasePostRequest' is not null or undefined
            common.assertParamExists("testCasePost", "testCasePostRequest", testCasePostRequest);
            const localVarPath = `/test-case`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            yield common.setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter["Content-Type"] = "application/json";
            common.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common.serializeDataIfNeeded(testCasePostRequest, localVarRequestOptions, configuration);
            return {
                url: common.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Get test result by ID
         * @param {string} resultId The ID of the test result to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testResultGet: (resultId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'resultId' is not null or undefined
            common.assertParamExists("testResultGet", "resultId", resultId);
            const localVarPath = `/test-result`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            yield common.setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (resultId !== undefined) {
                localVarQueryParameter["resultId"] = resultId;
            }
            common.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Create a new test result from runs
         * @param {TestResultPostRequest} testResultPostRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testResultPost: (testResultPostRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'testResultPostRequest' is not null or undefined
            common.assertParamExists("testResultPost", "testResultPostRequest", testResultPostRequest);
            const localVarPath = `/test-result`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            yield common.setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter["Content-Type"] = "application/json";
            common.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common.serializeDataIfNeeded(testResultPostRequest, localVarRequestOptions, configuration);
            return {
                url: common.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Get test result by ID
         * @param {string} resultId The ID of the test result to retrieve
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        testResultSimpleGet: (resultId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'resultId' is not null or undefined
            common.assertParamExists("testResultSimpleGet", "resultId", resultId);
            const localVarPath = `/test-result-simple`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            yield common.setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (resultId !== undefined) {
                localVarQueryParameter["resultId"] = resultId;
            }
            common.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Create a new test result from test runs
         * @param {TestResultSimplePostRequest} testResultSimplePostRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testResultSimplePost: (testResultSimplePostRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'testResultSimplePostRequest' is not null or undefined
            common.assertParamExists("testResultSimplePost", "testResultSimplePostRequest", testResultSimplePostRequest);
            const localVarPath = `/test-result-simple`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            yield common.setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter["Content-Type"] = "application/json";
            common.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common.serializeDataIfNeeded(testResultSimplePostRequest, localVarRequestOptions, configuration);
            return {
                url: common.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * CoreApi - functional programming interface
 * @export
 */
const CoreApiFp = function (configuration) {
    const localVarAxiosParamCreator = CoreApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Get pipelines, optionally filtered by label
         * @param {string} [label] The label to filter pipelines by
         * @param {string} [slug] The slug to filter pipelines by
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pipelinesGet(label, slug, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pipelinesGet(label, slug, options);
                return common.createRequestFunction(localVarAxiosArgs, globalAxios, base.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Create a run
         * @param {RunRequest} runRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        runPost(runRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.runPost(runRequest, options);
                return common.createRequestFunction(localVarAxiosArgs, globalAxios, base.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Get test cases for a pipeline
         * @param {string} [pipelineId] The ID of the Pipeline to retrieve test cases for
         * @param {string} [pipelineSlug] The slug of the Pipeline to retrieve test cases for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testCaseGet(pipelineId, pipelineSlug, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.testCaseGet(pipelineId, pipelineSlug, options);
                return common.createRequestFunction(localVarAxiosArgs, globalAxios, base.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Update an existing test case
         * @param {UpdateTestCase} updateTestCase
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testCasePatch(updateTestCase, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.testCasePatch(updateTestCase, options);
                return common.createRequestFunction(localVarAxiosArgs, globalAxios, base.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Create a new test case
         * @param {TestCasePostRequest} testCasePostRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testCasePost(testCasePostRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.testCasePost(testCasePostRequest, options);
                return common.createRequestFunction(localVarAxiosArgs, globalAxios, base.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Get test result by ID
         * @param {string} resultId The ID of the test result to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testResultGet(resultId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.testResultGet(resultId, options);
                return common.createRequestFunction(localVarAxiosArgs, globalAxios, base.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Create a new test result from runs
         * @param {TestResultPostRequest} testResultPostRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testResultPost(testResultPostRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.testResultPost(testResultPostRequest, options);
                return common.createRequestFunction(localVarAxiosArgs, globalAxios, base.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Get test result by ID
         * @param {string} resultId The ID of the test result to retrieve
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        testResultSimpleGet(resultId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.testResultSimpleGet(resultId, options);
                return common.createRequestFunction(localVarAxiosArgs, globalAxios, base.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Create a new test result from test runs
         * @param {TestResultSimplePostRequest} testResultSimplePostRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testResultSimplePost(testResultSimplePostRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.testResultSimplePost(testResultSimplePostRequest, options);
                return common.createRequestFunction(localVarAxiosArgs, globalAxios, base.BASE_PATH, configuration);
            });
        },
    };
};
/**
 * CoreApi - factory interface
 * @export
 */
const CoreApiFactory = function (configuration, basePath, axios) {
    const localVarFp = CoreApiFp(configuration);
    return {
        /**
         *
         * @summary Get pipelines, optionally filtered by label
         * @param {string} [label] The label to filter pipelines by
         * @param {string} [slug] The slug to filter pipelines by
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pipelinesGet(label, slug, options) {
            return localVarFp
                .pipelinesGet(label, slug, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Create a run
         * @param {RunRequest} runRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        runPost(runRequest, options) {
            return localVarFp
                .runPost(runRequest, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get test cases for a pipeline
         * @param {string} [pipelineId] The ID of the Pipeline to retrieve test cases for
         * @param {string} [pipelineSlug] The slug of the Pipeline to retrieve test cases for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testCaseGet(pipelineId, pipelineSlug, options) {
            return localVarFp
                .testCaseGet(pipelineId, pipelineSlug, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Update an existing test case
         * @param {UpdateTestCase} updateTestCase
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testCasePatch(updateTestCase, options) {
            return localVarFp
                .testCasePatch(updateTestCase, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Create a new test case
         * @param {TestCasePostRequest} testCasePostRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testCasePost(testCasePostRequest, options) {
            return localVarFp
                .testCasePost(testCasePostRequest, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get test result by ID
         * @param {string} resultId The ID of the test result to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testResultGet(resultId, options) {
            return localVarFp
                .testResultGet(resultId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Create a new test result from runs
         * @param {TestResultPostRequest} testResultPostRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testResultPost(testResultPostRequest, options) {
            return localVarFp
                .testResultPost(testResultPostRequest, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get test result by ID
         * @param {string} resultId The ID of the test result to retrieve
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        testResultSimpleGet(resultId, options) {
            return localVarFp
                .testResultSimpleGet(resultId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Create a new test result from test runs
         * @param {TestResultSimplePostRequest} testResultSimplePostRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testResultSimplePost(testResultSimplePostRequest, options) {
            return localVarFp
                .testResultSimplePost(testResultSimplePostRequest, options)
                .then((request) => request(axios, basePath));
        },
    };
};
/**
 * CoreApi - object-oriented interface
 * @export
 * @class CoreApi
 * @extends {BaseAPI}
 */
class CoreApi extends base.BaseAPI {
    /**
     *
     * @summary Get pipelines, optionally filtered by label
     * @param {string} [label] The label to filter pipelines by
     * @param {string} [slug] The slug to filter pipelines by
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreApi
     */
    pipelinesGet(label, slug, options) {
        return CoreApiFp(this.configuration)
            .pipelinesGet(label, slug, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Create a run
     * @param {RunRequest} runRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreApi
     */
    runPost(runRequest, options) {
        return CoreApiFp(this.configuration)
            .runPost(runRequest, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get test cases for a pipeline
     * @param {string} [pipelineId] The ID of the Pipeline to retrieve test cases for
     * @param {string} [pipelineSlug] The slug of the Pipeline to retrieve test cases for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreApi
     */
    testCaseGet(pipelineId, pipelineSlug, options) {
        return CoreApiFp(this.configuration)
            .testCaseGet(pipelineId, pipelineSlug, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Update an existing test case
     * @param {UpdateTestCase} updateTestCase
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreApi
     */
    testCasePatch(updateTestCase, options) {
        return CoreApiFp(this.configuration)
            .testCasePatch(updateTestCase, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Create a new test case
     * @param {TestCasePostRequest} testCasePostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreApi
     */
    testCasePost(testCasePostRequest, options) {
        return CoreApiFp(this.configuration)
            .testCasePost(testCasePostRequest, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get test result by ID
     * @param {string} resultId The ID of the test result to retrieve
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreApi
     */
    testResultGet(resultId, options) {
        return CoreApiFp(this.configuration)
            .testResultGet(resultId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Create a new test result from runs
     * @param {TestResultPostRequest} testResultPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreApi
     */
    testResultPost(testResultPostRequest, options) {
        return CoreApiFp(this.configuration)
            .testResultPost(testResultPostRequest, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get test result by ID
     * @param {string} resultId The ID of the test result to retrieve
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof CoreApi
     */
    testResultSimpleGet(resultId, options) {
        return CoreApiFp(this.configuration)
            .testResultSimpleGet(resultId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Create a new test result from test runs
     * @param {TestResultSimplePostRequest} testResultSimplePostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreApi
     */
    testResultSimplePost(testResultSimplePostRequest, options) {
        return CoreApiFp(this.configuration)
            .testResultSimplePost(testResultSimplePostRequest, options)
            .then((request) => request(this.axios, this.basePath));
    }
}

exports.CoreApi = CoreApi;
exports.CoreApiAxiosParamCreator = CoreApiAxiosParamCreator;
exports.CoreApiFactory = CoreApiFactory;
exports.CoreApiFp = CoreApiFp;
//# sourceMappingURL=core-api.js.map
