import { CreateMultipleTestCases, CreateSingleTestCase, Pipeline, TestCase, TestResultPostRequest, TestResultPostRequestTestRunsInner, UpdateTestCase } from "../models";
import { PipelineRun } from "./pipeline-run";
export type TestRun = TestResultPostRequestTestRunsInner;
/**
 * Retrieves test cases for a given pipeline ID from the Gentrace API
 * @async
 * @param {string} pipelineSlug - The pipeline slug
 * @throws {Error} Throws an error if the SDK is not initialized. Call init() first.
 * @returns {Promise<Array<TestCase>>} A Promise that resolves with an array of test cases.
 */
export declare const getTestCases: (pipelineSlug: string) => Promise<TestCase[]>;
/**
 * Creates a single test case for a given pipeline ID from the Gentrace API
 *
 * @async
 * @param {CreateSingleTestCase} payload - New test case payload
 * @throws {Error} Throws an error if the SDK is not initialized. Call init() first.
 * @returns {Promise<string>} A Promise that resolves to the created case ID
 */
export declare const createTestCase: (payload: CreateSingleTestCase) => Promise<string>;
/**
 * Creates multiple test cases for a given pipeline ID from the Gentrace API
 *
 * @async
 * @param {CreateMultipleTestCases} payload - New test case payloads
 * @throws {Error} Throws an error if the SDK is not initialized. Call init() first.
 * @returns {Promise<stringl>} A Promise that resolves to the number of test cases successfully created
 */
export declare const createTestCases: (payload: CreateMultipleTestCases) => Promise<number>;
export declare const updateTestCase: (payload: UpdateTestCase) => Promise<string>;
export declare const constructSubmissionPayload: (pipelineId: string, testRuns: TestRun[]) => TestResultPostRequest;
/**
 * Submits test results by creating TestResult objects from given test cases and corresponding outputs.
 * To use a Gentrace runner to capture intermediate steps, use {@link runTest} instead.
 *
 * @async
 * @function
 * @param {string} pipelineSlug - The slug of the pipeline
 * @param {TestCase[]} testCases - An array of TestCase objects.
 * @param {string[]} outputs - An array of outputs corresponding to each TestCase.
 *
 * @throws {Error} Will throw an error if the Gentrace API key is not initialized. Also, will throw an error if the number of test cases
 *  does not match the number of outputs.
 *
 * @returns {Promise<TestRunPost200Response>} The response data from the Gentrace API's testRunPost method.
 */
export declare const submitTestResult: (pipelineSlug: string, testCases: TestCase[], outputsList: Record<string, any>[]) => Promise<import("../models").TestResultPost200Response>;
type PipelineParams = {
    label?: string;
    slug?: string;
};
/**
 * Retrieves pipelines from the Gentrace API.
 * @async
 * @param {PipelineParams} [params] - Optional parameters to filter the pipelines.
 * @returns {Promise<Array<Pipeline>>} - A promise that resolves to an array of pipelines.
 * @throws {Error} - Throws an error if the Gentrace API key is not initialized.
 */
export declare const getPipelines: (params?: PipelineParams) => Promise<Pipeline[]>;
/**
 * Runs a test for a specific pipeline.
 *
 * @param {string} pipelineSlug - The slug of the pipeline.
 * @param {(testCase: TestCase) => Promise<PipelineRun>} handler - The handler function that runs the test case and returns a promise with a PipelineRun.
 * @returns {Promise<TestRun>} - A promise that resolves to the test result.
 * @throws {Error} - Throws an error if the specified pipeline cannot be found.
 */
export declare const runTest: (pipelineSlug: string, handler: (testCase: TestCase) => Promise<[any, PipelineRun]>) => Promise<import("../models").TestResultPost200Response>;
export {};
