import { Configuration } from '../configuration.mjs';
import { CoreApi } from '../api/core-api.mjs';
import { getProcessEnv } from './utils.mjs';

let GENTRACE_API_KEY = "";
let GENTRACE_BASE_PATH = "";
let GENTRACE_BRANCH = "";
let GENTRACE_COMMIT = "";
let GENTRACE_RUN_NAME = "";
let globalGentraceConfig = null;
let globalGentraceApi = null;
let resetGlobalGentraceApi = () => {
    globalGentraceConfig = null;
};
function init(values) {
    const { apiKey, basePath, branch, commit, runName } = values !== null && values !== void 0 ? values : {};
    if (!apiKey && !getProcessEnv("GENTRACE_API_KEY")) {
        throw new Error("Gentrace API key was provided neither by the `apiKey` param in the constructor nor by the `GENTRACE_API_KEY` env variable.");
    }
    GENTRACE_API_KEY = apiKey || getProcessEnv("GENTRACE_API_KEY");
    GENTRACE_RUN_NAME = runName || getProcessEnv("GENTRACE_RUN_NAME");
    if (basePath) {
        try {
            const url = new URL(basePath);
            if (url.pathname.startsWith("/api/v1")) {
            }
            else {
                throw new Error('Gentrace base path must end in "/api/v1".');
            }
        }
        catch (err) {
            throw new Error(`Invalid Gentrace base path: ${err.message}`);
        }
        GENTRACE_BASE_PATH = basePath;
    }
    globalGentraceConfig = new Configuration({
        apiKey: GENTRACE_API_KEY,
        basePath: GENTRACE_BASE_PATH,
    });
    globalGentraceApi = new CoreApi(globalGentraceConfig);
    if (branch) {
        GENTRACE_BRANCH = branch;
    }
    if (commit) {
        GENTRACE_COMMIT = commit;
    }
}
function deinit() {
    GENTRACE_API_KEY = "";
    GENTRACE_BASE_PATH = "";
    GENTRACE_BRANCH = "";
    GENTRACE_COMMIT = "";
    globalGentraceConfig = null;
    globalGentraceApi = null;
}

export { GENTRACE_API_KEY, GENTRACE_BASE_PATH, GENTRACE_BRANCH, GENTRACE_COMMIT, GENTRACE_RUN_NAME, deinit, globalGentraceApi, globalGentraceConfig, init, resetGlobalGentraceApi };
//# sourceMappingURL=init.mjs.map
